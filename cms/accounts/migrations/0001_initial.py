# Generated by Django 5.0.2 on 2024-03-21 23:36

import accounts.models
import cms.utils.cms_storage
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import re
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DigiDexUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Required. 32 characters or fewer. Letters, digits and dashes only.', max_length=32, unique=True, validators=[django.core.validators.RegexValidator(flags=re.RegexFlag['ASCII'], message='Username must contain only letters, digits, and dashes.', regex='^[\\w-]+$')])),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='The universal unique identifier associated with each User.', unique=True, verbose_name='User UUID')),
                ('email_confirmed', models.BooleanField(default=False, help_text='Indicates whether the user has confirmed their email address.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DigiDexProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, help_text='Slugified version of the username for URL usage.', max_length=255, unique=True)),
                ('bio', models.TextField(blank=True, help_text='A short biography of the user.', max_length=500)),
                ('location', models.CharField(blank=True, help_text='The location of the user.', max_length=30)),
                ('avatar', models.ImageField(blank=True, help_text='The avatar image of the profile.', null=True, storage=cms.utils.cms_storage.PublicMediaStorage, upload_to=accounts.models.profile_avatar_directory_path)),
                ('is_public', models.BooleanField(default=False, help_text='Indicates if the profile should be publicly visible to the public or private. Profile is private by default.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the profile was created.', verbose_name='Created At')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='The date and time when the profile was last modified.', verbose_name='Last Modified')),
                ('user', models.OneToOneField(help_text='The user associated with this profile.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
    ]
