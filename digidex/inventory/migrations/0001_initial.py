# Generated by Django 4.2.6 on 2024-01-26 17:14

import digidex.inventory.models.digit
import digidex.inventory.models.journal
import digidex.utils.custom_storage
import digidex.utils.validators.digit_thumbnail_validator
import digidex.utils.validators.journal_entry_validator
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taxonomy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Digit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='A human-readable name for the digitized plant.', max_length=50, null=True)),
                ('description', models.TextField(blank=True, help_text='A short description of the digitized plant.', max_length=500, null=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='The unique identifier associated with the NFC tag or identification mechanism.', unique=True, verbose_name='Tag UID')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the digitized plant.', null=True, upload_to=digidex.inventory.models.digit.digit_thumbnail_directory_path, validators=[digidex.utils.validators.digit_thumbnail_validator.validate_digit_thumbnail])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the digit instance was created.', verbose_name='Created At')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='The date and time when the digit instance was last modified.', verbose_name='Last Modified')),
            ],
            options={
                'verbose_name': 'Digit',
                'verbose_name_plural': 'Digits',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(db_index=True, help_text='The unique serial number associated with the NFC tag.', max_length=32, unique=True, verbose_name='Tag Serial Number')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='The unique identifier associated with the NFC tag or identification mechanism.', unique=True, verbose_name='Tag UUID')),
                ('counter', models.IntegerField(default=0, help_text='The number of times the tag has been scanned.', verbose_name='Counter')),
                ('active', models.BooleanField(default=False, help_text='Indicates whether the link is currently active and mapped to a digital object.', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the link instance was created.', verbose_name='Created At')),
                ('last_modified', models.DateTimeField(auto_now=True, help_text='The date and time when the link instance was last modified.', verbose_name='Last Modified')),
                ('user', models.ForeignKey(blank=True, help_text='The user associated with this link.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='The textual content of the journal entry.', verbose_name='Content')),
                ('image', models.ImageField(blank=True, help_text='(Optional) The image to save with the journal entry. Only .jpg, .png, and .jpeg extensions are allowed.', null=True, storage=digidex.utils.custom_storage.PrivateMediaStorage(), upload_to=digidex.inventory.models.journal.journal_image_directory_path, validators=[digidex.utils.validators.journal_entry_validator.validate_journal_entry])),
                ('watered', models.BooleanField(default=False, help_text='Indicates whether the digitized plant was watered in this journal entry.', verbose_name='Watered')),
                ('fertilized', models.BooleanField(default=False, help_text='Indicates whether the digitized plant was fertilized in this journal entry.', verbose_name='Fertilized')),
                ('cleaned', models.BooleanField(default=False, help_text='Indicates whether the digitized plant was cleaned in this journal entry.', verbose_name='Cleaned')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this journal entry was created.', verbose_name='Created At')),
                ('digit', models.ForeignKey(help_text='The digitized plant to which this journal entry is related.', on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to='inventory.digit')),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='digit',
            name='nfc_link',
            field=models.OneToOneField(help_text='NFC link for the digitized plant.', on_delete=django.db.models.deletion.CASCADE, related_name='digit', to='inventory.link'),
        ),
        migrations.AddField(
            model_name='digit',
            name='taxonomic_unit',
            field=models.ForeignKey(blank=True, help_text='The taxonomic classification of the digitized plant.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='digits', to='taxonomy.unit'),
        ),
    ]
