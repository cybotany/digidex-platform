# Generated by Django 5.0.2 on 2024-07-04 15:19

import django.db.models.deletion
import inventory.models.nfc
import taggit.managers
import uuid
import wagtail.models
import wagtail.models.collections
import wagtail.models.specific
import wagtail.search.index
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('wagtailcore', '0091_remove_revision_submitted_for_moderation'),
        ('wagtaildocs', '0012_uploadeddocument'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('collection_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.collection')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('has_unpublished_changes', models.BooleanField(default=False, editable=False, verbose_name='has unpublished changes')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('locked', models.BooleanField(default=False, editable=False, verbose_name='locked')),
                ('locked_at', models.DateTimeField(editable=False, null=True, verbose_name='locked at')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('latest_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='latest revision')),
                ('live_revision', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.revision', verbose_name='live revision')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
                ('locked_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locked_%(class)ss', to=settings.AUTH_USER_MODEL, verbose_name='locked by')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(wagtail.models.WorkflowMixin, wagtail.models.PreviewableMixin, wagtail.models.specific.SpecificMixin, 'wagtailcore.collection', wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='NearFieldCommunicationTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('serial_number', models.CharField(db_index=True, editable=False, max_length=32, unique=True, validators=[inventory.models.nfc.validate_ntag_serial])),
                ('tag_form', models.CharField(choices=[('PL', 'Plant Label'), ('DT', 'Dog Tag'), ('CT', 'Cat Tag'), ('BS', 'Bubble Sticker'), ('RS', 'Regular Sticker'), ('WI', 'Wet Inlay'), ('DI', 'Dry Inlay')], default='RS', max_length=2)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'nfc tag',
                'verbose_name_plural': 'nfc tags',
            },
        ),
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('inventory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.inventory')),
            ],
            options={
                'verbose_name': 'Inventory Category',
                'verbose_name_plural': 'Inventory Categories',
            },
            bases=('inventory.inventory',),
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('inventory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.inventory')),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
            },
            bases=('inventory.inventory',),
        ),
        migrations.CreateModel(
            name='InventoryProfile',
            fields=[
                ('inventory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.inventory')),
            ],
            options={
                'verbose_name': 'Inventory Profile',
                'verbose_name_plural': 'Inventory Profiles',
            },
            bases=('inventory.inventory',),
        ),
        migrations.CreateModel(
            name='InventoryLink',
            fields=[
                ('nearfieldcommunicationtag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.nearfieldcommunicationtag')),
            ],
            options={
                'verbose_name': 'Inventory NFC Mapping',
                'verbose_name_plural': 'Inventory NFC Mappings',
            },
            bases=('inventory.nearfieldcommunicationtag',),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('entry', models.TextField(blank=True, verbose_name='entry')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('collection', models.ForeignKey(default=wagtail.models.collections.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.collection', verbose_name='collection')),
                ('submitted_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='submitted by user')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'note',
                'verbose_name_plural': 'notes',
                'permissions': [('choose_document', 'Can choose document')],
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='InventoryNote',
            fields=[
                ('inventory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.inventory')),
                ('body', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.note')),
                ('document', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.digideximage')),
            ],
            options={
                'verbose_name': 'Inventory Note',
                'verbose_name_plural': 'Inventory Notes',
            },
            bases=('inventory.inventory',),
        ),
        migrations.AddConstraint(
            model_name='inventory',
            constraint=models.UniqueConstraint(fields=('translation_key', 'locale'), name='unique_translation_key_locale'),
        ),
        migrations.AddField(
            model_name='inventorylink',
            name='inventory',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.inventory'),
        ),
    ]
