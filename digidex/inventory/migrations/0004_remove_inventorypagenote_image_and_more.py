# Generated by Django 5.0.2 on 2024-06-20 09:11

import django.db.models.deletion
import modelcluster.fields
import uuid
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0001_initial'),
        ('inventory', '0003_nearfieldcommunicationtag_nearfieldcommunicationlink'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='inventorypagenote',
            name='image',
        ),
        migrations.RemoveField(
            model_name='inventorypagenote',
            name='page',
        ),
        migrations.RemoveField(
            model_name='nearfieldcommunicationlink',
            name='content_type',
        ),
        migrations.RemoveField(
            model_name='nearfieldcommunicationlink',
            name='ntag',
        ),
        migrations.RemoveField(
            model_name='trainerpagenote',
            name='image',
        ),
        migrations.RemoveField(
            model_name='trainerpagenote',
            name='page',
        ),
        migrations.AlterModelOptions(
            name='trainerpage',
            options={},
        ),
        migrations.CreateModel(
            name='AssetNearFieldCommunicationLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('page', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nfc', to='inventory.assetpage')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='inventory.nearfieldcommunicationtag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('entry', wagtail.fields.RichTextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='inventory.assetpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetNoteGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.digideximage')),
                ('note', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='inventory.assetnote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryNearFieldCommunicationLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('inventory', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nfc', to='inventory.inventorypage')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='inventory.nearfieldcommunicationtag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('entry', wagtail.fields.RichTextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='inventory.inventorypage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryNoteGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.digideximage')),
                ('note', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='inventory.inventorynote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainerNearFieldCommunicationLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('page', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nfc', to='inventory.trainerpage')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='inventory.nearfieldcommunicationtag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainerNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('entry', wagtail.fields.RichTextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='inventory.trainerpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrainerNoteGalleryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='base.digideximage')),
                ('note', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='inventory.trainernote')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.DeleteModel(
            name='AssetPageNote',
        ),
        migrations.DeleteModel(
            name='InventoryPageNote',
        ),
        migrations.DeleteModel(
            name='NearFieldCommunicationLink',
        ),
        migrations.DeleteModel(
            name='TrainerPageNote',
        ),
    ]
