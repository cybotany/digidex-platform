# Generated by Django 4.2.9 on 2024-02-09 04:50

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('taxonomy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('author_id', models.IntegerField(editable=False, help_text='The unique identifier for the author(s) of a taxonomic name.', primary_key=True, serialize=False, verbose_name='Author ID')),
                ('author', models.CharField(help_text='The author(s) associated with the name of a taxon.', max_length=100, verbose_name='Author')),
                ('short_author', models.CharField(blank=True, help_text='The author(s) associated with the name of a taxon with parenthesis, commas and periods removed.', max_length=100, null=True, verbose_name='Short Author')),
                ('last_modified', models.DateTimeField(help_text='The date on the record was last modified.', verbose_name='Last Modified')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.IntegerField(help_text='The unique identifier for the comment.', primary_key=True, serialize=False, verbose_name='Comment ID')),
                ('commentator', models.CharField(blank=True, help_text='The name of the person who made the comment.', max_length=100, null=True, verbose_name='Commentator')),
                ('comment', models.TextField(help_text='Remarks providing additional information regarding a Taxonomic Unit.', max_length=2000, verbose_name='Comment')),
                ('created_at', models.DateTimeField(help_text='The date and time when the comment was made.', verbose_name='Created At')),
                ('last_modified', models.DateTimeField(help_text='The date and time when the record was last modified.', verbose_name='Last Modified')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('expert_prefix', models.CharField(default='EXP', help_text='A prefix attached to a serial number to identify the record as existing in Experts', max_length=3)),
                ('expert_id', models.IntegerField(editable=False, help_text='The unique identifier for the author(s) of a taxonomic name.', primary_key=True, serialize=False)),
                ('expert', models.CharField(help_text='The name of the taxonomic expert providing credence to the taxonomy, nomenclature or attributes of a Taxonomic Unit occurrence for the ITIS.', max_length=100, null=True)),
                ('expert_comment', models.TextField(blank=True, help_text='Remarks noted by or associated with a taxonomic expert who is providing credence to the taxonomy, nomenclature or attributes of a Taxonomic Unit occurrence.', max_length=500, null=True)),
                ('last_modified', models.DateTimeField(blank=True, help_text='The date and time the record was last modified.', null=True)),
            ],
            options={
                'verbose_name': 'Taxon Expert',
                'verbose_name_plural': 'Taxon Experts',
                'unique_together': {('expert_prefix', 'expert_id')},
            },
        ),
        migrations.CreateModel(
            name='Geography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geography', models.CharField(help_text='The geographic value.', max_length=200, verbose_name='Geographic Value')),
                ('last_modified', models.DateTimeField(blank=True, help_text='The date and time the record was last updated.', null=True, verbose_name='Last Modified')),
            ],
            options={
                'verbose_name': 'Geographic Division',
                'verbose_name_plural': 'Geographic Divisions',
            },
        ),
        migrations.CreateModel(
            name='Jurisdiction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jurisdiction_value', models.CharField(help_text='Label signifying a US jurisdictional unit as defined by the TWG, and Canada.', max_length=30)),
                ('origin', models.CharField(blank=True, help_text='Indication of whether a Taxonomic Unit is native and/or introduced to a US jurisdictional unit.', max_length=19, null=True)),
                ('last_modified', models.DateTimeField(blank=True, help_text='The date and time when the geographic value was added.', null=True)),
            ],
            options={
                'verbose_name': 'Jurisdiction',
                'verbose_name_plural': 'Jurisdictions',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('publication_prefix', models.CharField(default='PUB', help_text='A prefix attached to a serial number to associate the record with the Publications table.', max_length=3)),
                ('publication_id', models.IntegerField(help_text='The unique identifier of a printed reference.', primary_key=True, serialize=False)),
                ('reference_author', models.CharField(blank=True, help_text='Author(s) of the printed reference.', max_length=100, null=True)),
                ('title', models.CharField(blank=True, help_text='The identifying name given an article contained in a printed reference.', max_length=255, null=True)),
                ('publication_name', models.CharField(blank=True, help_text='The title of the printed reference, including volume and number, if applicable.', max_length=255, null=True)),
                ('listed_publication_date', models.DateTimeField(blank=True, help_text='The date printed on a journal or other printed reference.', null=True)),
                ('actual_publication_date', models.DateTimeField(blank=True, help_text='The true date on which the printed reference was published.', null=True)),
                ('publisher', models.CharField(blank=True, help_text='Producer of the printed reference.', max_length=80, null=True)),
                ('publication_place', models.CharField(blank=True, help_text='Location of the publisher.', max_length=40, null=True)),
                ('isbn', models.CharField(blank=True, help_text='The ISBN number of a book cited.', max_length=16, null=True)),
                ('issn', models.CharField(blank=True, help_text='The ISSN number of a journal cited.', max_length=16, null=True)),
                ('pages', models.CharField(blank=True, help_text='Page numbers within the printed reference to which the specific citation refers.', max_length=15, null=True)),
                ('publication_comment', models.TextField(blank=True, help_text='Remarks associated with the printed reference cited.', max_length=500, null=True)),
                ('last_modified', models.DateTimeField(blank=True, help_text='The date and time the record was last updated.', null=True)),
            ],
            options={
                'verbose_name': 'Publication',
                'verbose_name_plural': 'Publications',
                'unique_together': {('publication_prefix', 'publication_id')},
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('source_prefix', models.CharField(default='SRC', help_text='A prefix attached to a serial id to identify the record as an Other Source.', max_length=3)),
                ('source_id', models.IntegerField(help_text='The unique identifier for a supplier of information, other than a person or publication.', primary_key=True, serialize=False)),
                ('source_type', models.CharField(blank=True, help_text='The type of supplier providing information to ITIS, e.g., database.', max_length=10, null=True)),
                ('source', models.CharField(blank=True, help_text='The name of the supplier of information to the ITIS database.', max_length=64, null=True)),
                ('version', models.CharField(blank=True, help_text='Number, date, or other identifier of the source indicating its version.', max_length=10, null=True)),
                ('acquisition_date', models.DateField(blank=True, help_text='The date on which ITIS acquired the data from the source.', null=True)),
                ('source_comment', models.TextField(blank=True, help_text='Remarks associated with the provider of information to ITIS.', max_length=500, null=True)),
                ('last_modified', models.DateTimeField(blank=True, help_text='The date and time the record was last updated.', null=True)),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
                'unique_together': {('source_prefix', 'source_id')},
            },
        ),
        migrations.CreateModel(
            name='UnitComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(help_text='The date and time the record was last updated.')),
                ('comment', models.ForeignKey(help_text='Unique identifier for the associated Comment.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.comment')),
            ],
            options={
                'verbose_name': 'Taxon Comments',
                'verbose_name_plural': 'Taxon Comments',
            },
        ),
        migrations.CreateModel(
            name='UnitReferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_prefix', models.CharField(choices=[('EXP', 'Expert'), ('PUB', 'Publication'), ('SRC', 'Other Source')], help_text='A prefix identifying the reference type (Expert, Publication, Other Source).', max_length=3)),
                ('reference_id', models.IntegerField(help_text='The identifier for a publication, expert, or other source, used in conjunction with reference_prefix.')),
                ('original_desc_ind', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], help_text='Indicator for the reference of the original description of the taxonomic unit.', max_length=1, null=True)),
                ('init_itis_desc_ind', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], help_text='Indicator for references serving as the basis for recognizing a taxonomic unit where the original reference is unavailable.', max_length=1, null=True)),
                ('change_track_id', models.IntegerField(blank=True, help_text='The unique identifier assigned to a change made to a taxonomic unit.', null=True)),
                ('vernacular_name', models.CharField(blank=True, help_text='A common name associated with a taxonomic unit.', max_length=80, null=True)),
                ('last_modified', models.DateTimeField(help_text='The date and time the record was last updated.')),
            ],
            options={
                'verbose_name': 'Unit Reference',
                'verbose_name_plural': 'Unit References',
            },
        ),
        migrations.CreateModel(
            name='UnitSynonyms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified', models.DateTimeField(help_text='The date and time the record was last updated.')),
            ],
            options={
                'verbose_name': 'Unit Synonym',
                'verbose_name_plural': 'Unit Synonyms',
            },
        ),
        migrations.CreateModel(
            name='Vernacular',
            fields=[
                ('vernacular_id', models.IntegerField(help_text='Unique identifier for a vernacular name entry.', primary_key=True, serialize=False)),
                ('vernacular_name', models.CharField(help_text='Common name associated with the taxonomic unit.', max_length=80)),
                ('language', models.CharField(help_text='Language of the vernacular name.', max_length=15)),
                ('approved_ind', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], help_text='Indicator of whether the vernacular name is approved.', max_length=1, null=True)),
                ('last_modified', models.DateTimeField(help_text='Date and time when the record was last updated.')),
            ],
            options={
                'verbose_name': 'Vernacular Name',
                'verbose_name_plural': 'Vernacular Names',
            },
        ),
        migrations.CreateModel(
            name='VernacularReferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_prefix', models.CharField(choices=[('EXP', 'Expert'), ('PUB', 'Publication'), ('SRC', 'Other Source')], help_text='Prefix indicating the type of reference associated with the vernacular.', max_length=3)),
                ('reference_id', models.IntegerField(help_text='Identifier for the specific reference providing evidence for the vernacular.')),
                ('last_modified', models.DateTimeField(help_text='Date and time when the record was last modified.')),
            ],
            options={
                'verbose_name': 'Vernacular Reference',
                'verbose_name_plural': 'Vernacular References',
            },
        ),
        migrations.DeleteModel(
            name='GeographicDivision',
        ),
        migrations.AlterModelOptions(
            name='hierarchy',
            options={'verbose_name': 'Hierarchy', 'verbose_name_plural': 'Hierarchies'},
        ),
        migrations.AlterModelOptions(
            name='kingdom',
            options={'verbose_name': 'Kingdom', 'verbose_name_plural': 'Kingdoms'},
        ),
        migrations.AlterModelOptions(
            name='rank',
            options={'verbose_name': 'Rank', 'verbose_name_plural': 'Ranks'},
        ),
        migrations.AlterUniqueTogether(
            name='rank',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='kingdom',
            name='update_date',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='completeness_rtng',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='credibility_rtng',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='hybrid_author_id',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='phylo_sort_seq',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='taxon_author_id',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='uncertain_prnt_ind',
        ),
        migrations.RemoveField(
            model_name='unit',
            name='update_date',
        ),
        migrations.AddField(
            model_name='kingdom',
            name='last_modified',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='The date a record was last modified.', verbose_name='Update Date'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rank',
            name='direct_parent_rank',
            field=models.SmallIntegerField(default=0, help_text='The rank of the direct parent of the current rank.', verbose_name='Direct Parent Rank'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rank',
            name='last_modified',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='The date on which a record was last modified.', verbose_name='Update Date'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rank',
            name='rank',
            field=models.SmallIntegerField(default=0, help_text='A unique identifier for a specific rank within the taxonomic kingdom hierarchy.', verbose_name='Rank ID'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rank',
            name='required_parent_rank',
            field=models.SmallIntegerField(default=0, help_text='The rank of the required parent of the current rank.', verbose_name='Required Parent Rank'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='unit',
            name='completeness_rating',
            field=models.CharField(blank=True, help_text='A rating designation reflecting whether all known, named, modern species (extant or recently extinct) for that taxon were incorporated into ITIS at the time of review.', max_length=10, null=True, verbose_name='Completeness Rating'),
        ),
        migrations.AddField(
            model_name='unit',
            name='credibility_rating',
            field=models.CharField(blank=True, help_text='A subjective rating designation as determined by the Taxonomic Work Group reflecting the level of review and the perceived level of accuracy for an occurrence of Taxonomic Units and its associated attributes.', max_length=40, null=True, verbose_name='Credibility Rating'),
        ),
        migrations.AddField(
            model_name='unit',
            name='last_modified',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='The date a record was last modified.', verbose_name='Update Date'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='unit',
            name='phylo_sort_sequence',
            field=models.SmallIntegerField(blank=True, help_text='A sequence for an occurrence of Taxonomic Units with ranks between kingdom and order, inclusive, that will allow output to be displayed in phylogenetic order.', null=True, verbose_name='Phylogenetic Sort Sequence'),
        ),
        migrations.AddField(
            model_name='unit',
            name='uncertain_parent_ind',
            field=models.CharField(blank=True, help_text='Indicator for occurrences of Taxonomic Units where placement is uncertain.', max_length=3, null=True, verbose_name='Uncertain Parent Indicator'),
        ),
        migrations.AlterField(
            model_name='hierarchy',
            name='children_count',
            field=models.IntegerField(help_text='The count of direct children under this taxonomic unit.', verbose_name='Children Count'),
        ),
        migrations.AlterField(
            model_name='hierarchy',
            name='hierarchy_string',
            field=models.TextField(help_text='A string representation of the complete hierarchy path.', unique=True, verbose_name='Hierarchy String'),
        ),
        migrations.AlterField(
            model_name='hierarchy',
            name='level',
            field=models.IntegerField(help_text='The hierarchical level of the taxonomic unit.', verbose_name='Level'),
        ),
        migrations.AlterField(
            model_name='hierarchy',
            name='parent_tsn',
            field=models.IntegerField(blank=True, help_text='The TSN of the parent taxonomic unit.', null=True, verbose_name='Parent Taxonomic Serial Number'),
        ),
        migrations.AlterField(
            model_name='hierarchy',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit', verbose_name='Taxonomic Serial Number'),
        ),
        migrations.AlterField(
            model_name='kingdom',
            name='kingdom_id',
            field=models.IntegerField(help_text='A unique identifier for the highest level of the taxonomic hierarchy structure.', primary_key=True, serialize=False, verbose_name='Kingdom ID'),
        ),
        migrations.AlterField(
            model_name='kingdom',
            name='kingdom_name',
            field=models.CharField(help_text='The label associated with the highest level of the taxonomic hierarchy structure.', max_length=10, verbose_name='Kingdom Name'),
        ),
        migrations.AlterField(
            model_name='rank',
            name='kingdom',
            field=models.ForeignKey(help_text='The kingdom to which the rank belongs.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.kingdom', verbose_name='Kingdom ID'),
        ),
        migrations.AlterField(
            model_name='rank',
            name='rank_name',
            field=models.CharField(help_text='The label associated with the specific rank of a taxonomic kingdom hierarchy.', max_length=15, verbose_name='Rank Name'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='complete_name',
            field=models.CharField(blank=True, help_text='The unit indicators and unit name fields concatenated and trimmed to present entire scientific name, without taxon author. Designed to be helpful when searching for taxa by scientific name.', max_length=300, null=True, verbose_name='Complete Name'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='currency_rating',
            field=models.CharField(blank=True, help_text='A rating designation reflecting the year of revision/source for a group.', max_length=7, null=True, verbose_name='Currency Rating'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='initial_time_stamp',
            field=models.DateTimeField(help_text='Date and time at which an occurrence of Taxonomic Units is initially loaded into the ITIS database.', verbose_name='Initial Time Stamp'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='kingdom',
            field=models.ForeignKey(blank=True, help_text='A unique identifier for the highest level of the taxonomic hierarchy structure.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.kingdom', verbose_name='Kingdom'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='n_usage',
            field=models.CharField(blank=True, help_text='Current standing of an occurrence of a Taxonomic Unit.', max_length=12, null=True, verbose_name='Name Usage'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='name_usage',
            field=models.CharField(blank=True, help_text='Current standing of an occurrence of a Taxonomic Unit.', max_length=12, null=True, verbose_name='Name Usage'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='The taxonomic serial number for the direct parent of the subject occurrence of Taxonomic Units.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='taxonomy.unit', verbose_name='Parent TSN'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='rank',
            field=models.ForeignKey(blank=True, help_text='A unique identifier for a specific level within the taxonomic hierarchy.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.rank', verbose_name='Rank'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='tsn',
            field=models.IntegerField(help_text='The unique identifier for an occurrence of Taxonomic Units.', primary_key=True, serialize=False, verbose_name='Taxonomic Serial Number'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unaccept_reason',
            field=models.CharField(blank=True, help_text='The cause for an occurrence of Taxonomic Units being identified as not accepted/invalid under the usage element.', max_length=50, null=True, verbose_name='Unaccepted Reason'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_ind1',
            field=models.CharField(blank=True, help_text='Indicator of an occurrence of a plant hybrid at the generic level.', max_length=1, null=True, verbose_name='Unit Indicator 1'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_ind2',
            field=models.CharField(blank=True, help_text='A hybrid indicator positioned between the first and second parts of a binomial or polynomial taxonomic name.', max_length=1, null=True, verbose_name='Unit Indicator 2'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_ind3',
            field=models.CharField(blank=True, help_text='A category indicator located within a polynomial taxonomic name.', max_length=7, null=True, verbose_name='Unit Indicator 3'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_ind4',
            field=models.CharField(blank=True, help_text='A category indicator located within a polynomial taxonomic name.', max_length=7, null=True, verbose_name='Unit Indicator 4'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_name1',
            field=models.CharField(blank=True, help_text='The singular or first part of a scientifically accepted label for an occurrence of Taxonomic Units.', max_length=35, null=True, verbose_name='Unit Name 1'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_name2',
            field=models.CharField(blank=True, help_text='The second part of a scientifically accepted label for a binomial/polynomial occurrence of Taxonomic Units.', max_length=35, null=True, verbose_name='Unit Name 2'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_name3',
            field=models.CharField(blank=True, help_text='The third portion of a scientifically accepted label for a polynomial occurrence of Taxonomic Units', max_length=35, null=True, verbose_name='Unit Name 3'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unit_name4',
            field=models.CharField(blank=True, help_text='The fourth part of a scientifically accepted label for a polynomial occurrence of Taxonomic Units.', max_length=35, null=True, verbose_name='Unit Name 4'),
        ),
        migrations.AlterField(
            model_name='unit',
            name='unnamed_taxon_ind',
            field=models.CharField(blank=True, help_text='Indicator for an occurrence of Taxonomic Units that has not been assigned a name.', max_length=7, null=True, verbose_name='Unnamed Taxon Indicator'),
        ),
        migrations.AlterUniqueTogether(
            name='rank',
            unique_together={('kingdom', 'rank')},
        ),
        migrations.AddField(
            model_name='vernacularreferences',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='vernacularreferences',
            name='vernacular',
            field=models.ForeignKey(help_text='Unique identifier for the vernacular name entry.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.vernacular'),
        ),
        migrations.AddField(
            model_name='vernacular',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='unitsynonyms',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='unitsynonyms',
            name='tsn_accepted',
            field=models.ForeignKey(help_text='Taxonomic Serial Number for the accepted Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, related_name='accepted_for', to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='unitreferences',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='unitcomments',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='jurisdiction',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit'),
        ),
        migrations.AddField(
            model_name='geography',
            name='tsn',
            field=models.ForeignKey(help_text='Taxonomic Serial Number (TSN) for the Taxonomic Unit.', on_delete=django.db.models.deletion.CASCADE, to='taxonomy.unit', verbose_name='Taxonomic Serial Number'),
        ),
        migrations.AddField(
            model_name='author',
            name='kingdom',
            field=models.ForeignKey(blank=True, help_text='A unique identifier for the highest level of the taxonomic hierarchy structure.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='taxonomy.kingdom', verbose_name='Kingdom'),
        ),
        migrations.RemoveField(
            model_name='rank',
            name='direct_parent_rank_id',
        ),
        migrations.RemoveField(
            model_name='rank',
            name='rank_id',
        ),
        migrations.RemoveField(
            model_name='rank',
            name='required_parent_rank_id',
        ),
        migrations.RemoveField(
            model_name='rank',
            name='update_date',
        ),
        migrations.AddField(
            model_name='unit',
            name='author',
            field=models.ForeignKey(blank=True, help_text='A unique identifier for the author(s) of a taxonomic name.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_units', to='taxonomy.author', verbose_name='Author ID'),
        ),
        migrations.AddField(
            model_name='unit',
            name='hybrid_author',
            field=models.ForeignKey(blank=True, help_text='The unique identifier for the author(s) of a taxonomic name which has been identified as the second part of a hybrid formula.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authored_hybrid_units', to='taxonomy.author', verbose_name='Hybrid Author ID'),
        ),
        migrations.AlterUniqueTogether(
            name='vernacularreferences',
            unique_together={('tsn', 'vernacular', 'reference_prefix', 'reference_id')},
        ),
        migrations.AlterUniqueTogether(
            name='vernacular',
            unique_together={('tsn', 'vernacular_id')},
        ),
        migrations.AlterUniqueTogether(
            name='unitsynonyms',
            unique_together={('tsn', 'tsn_accepted')},
        ),
        migrations.AlterUniqueTogether(
            name='unitreferences',
            unique_together={('tsn', 'reference_prefix', 'reference_id')},
        ),
        migrations.AlterUniqueTogether(
            name='unitcomments',
            unique_together={('tsn', 'comment')},
        ),
        migrations.AlterUniqueTogether(
            name='jurisdiction',
            unique_together={('tsn', 'jurisdiction_value')},
        ),
        migrations.AlterUniqueTogether(
            name='geography',
            unique_together={('tsn', 'geography')},
        ),
    ]
