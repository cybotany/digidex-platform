# Generated by Django 5.0.2 on 2024-03-25 15:53

import base.blocks.basics
import base.fields.wagtail
import wagtail.blocks
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0006_alter_homepage_body'),
    ]

    operations = [
        migrations.AlterField(
            model_name='homepage',
            name='body',
            field=base.fields.wagtail.BaseStreamField([('hero', wagtail.blocks.StructBlock([('content', wagtail.blocks.StreamBlock([('grid', wagtail.blocks.StreamBlock([('blocks', wagtail.blocks.StreamBlock([('cta', wagtail.blocks.StructBlock([('promo', wagtail.blocks.StructBlock([('page', base.blocks.basics.BasePageBlock(help_text='Select the page to link to for the promo', required=True)), ('text', base.blocks.basics.BaseRichTextBlock(help_text='Enter the text for the promo', required=True))], required=False)), ('heading', wagtail.blocks.StructBlock([('title', base.blocks.basics.BaseCharBlock(help_text='Enter the heading title', required=True)), ('subtitle', base.blocks.basics.BaseCharBlock(help_text='Enter the heading subtitle', required=False)), ('text', base.blocks.basics.BaseTextBlock(help_text='Enter the heading text', required=False))])), ('buttons', wagtail.blocks.StructBlock([('primary', wagtail.blocks.StructBlock([('text', base.blocks.basics.BaseCharBlock(help_text='Text for the button', required=True)), ('url', base.blocks.basics.BaseURLBlock(help_text='URL the button will link to', required=True))], help_text='Primary button', required=True)), ('secondary', wagtail.blocks.StructBlock([('text', base.blocks.basics.BaseCharBlock(help_text='Text for the button', required=True)), ('url', base.blocks.basics.BaseURLBlock(help_text='URL the button will link to', required=True)), ('icon', base.blocks.basics.BaseImageBlock())], help_text='Secondary button', required=False))]))])), ('lottie', wagtail.blocks.StructBlock([('lines_a', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('width', base.blocks.basics.BaseCharBlock(default='1px', help_text='Line width')), ('height', base.blocks.basics.BaseCharBlock(default='1px', help_text='Line height')), ('css_class', wagtail.blocks.ChoiceBlock(choices=[('line-w', 'Width line'), ('line-h', 'Height line')]))]), help_text='Vertical lines configuration')), ('lines_b', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('width', base.blocks.basics.BaseCharBlock(default='1px', help_text='Line width')), ('height', base.blocks.basics.BaseCharBlock(default='1px', help_text='Line height')), ('css_class', wagtail.blocks.ChoiceBlock(choices=[('line-w', 'Width line'), ('line-h', 'Height line')]))]), help_text='Horizontal lines configuration')), ('animations', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('animation_type', wagtail.blocks.ChoiceBlock(choices=[('lottie', 'Lottie')])), ('animation_src', base.blocks.basics.BaseDocumentBlock(required=True)), ('loop', base.blocks.basics.BaseBooleanBlock(help_text='Loop animation', required=False)), ('direction', base.blocks.basics.BaseIntegerBlock(default=1, help_text='Animation direction')), ('autoplay', base.blocks.basics.BaseBooleanBlock(help_text='Autoplay animation', required=False)), ('renderer', wagtail.blocks.ChoiceBlock(choices=[('svg', 'SVG')])), ('default_duration', base.blocks.basics.BaseFloatBlock(help_text='Default duration', required=False)), ('duration', base.blocks.basics.BaseFloatBlock(help_text='Duration', required=False))]), help_text='List of Lottie animations'))]))]))]))]))])), ('solutions', wagtail.blocks.StructBlock([('content', wagtail.blocks.StreamBlock([('grid', wagtail.blocks.StreamBlock([('solutions', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('tag', wagtail.blocks.StructBlock([('text', base.blocks.basics.BaseCharBlock(help_text="Enter the text for the tag (e.g., 'Most popular').", required=True)), ('color', wagtail.blocks.ChoiceBlock(choices=[('yellow', 'Yellow'), ('blue', 'Blue')], help_text='Select the color of the tag.'))], help_text="Optionally add a tag to the card, such as 'Most popular' or 'New'.", required=False)), ('items', wagtail.blocks.StructBlock([('image', base.blocks.basics.BaseImageBlock(help_text='Select an image for the solution card.', required=True)), ('heading', base.blocks.basics.BaseRichTextBlock(help_text='Enter the heading for the solution card.', required=True)), ('paragraph', base.blocks.basics.BaseRichTextBlock(help_text='Enter a descriptive paragraph for the solution.', required=True))], help_text='Add the main content for the card.')), ('button', wagtail.blocks.StructBlock([('icon', base.blocks.basics.BaseImageBlock(help_text='Select an icon image to represent the link.', required=True)), ('text', base.blocks.basics.BaseCharBlock(help_text='Enter the text for the link.', required=True)), ('page', base.blocks.basics.BasePageBlock(help_text='Select the destination page for the link.', required=False)), ('target', wagtail.blocks.ChoiceBlock(choices=[('_self', 'Open in the same window'), ('_blank', 'Open in a new window')], help_text='Choose where the link should open.'))], help_text='Define an icon with a link for additional details or actions.', required=True))]), help_text='Add up to 4 solution cards. Each card will be displayed in a single row.', max_num=4, min_num=1))])), ('block', wagtail.blocks.StructBlock([('subtitle', base.blocks.basics.BaseCharBlock(help_text='Enter a subtitle for the clients section.', max_length=255, required=False)), ('logos', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('image', base.blocks.basics.BaseImageBlock(help_text='Select a client logo image.', required=True)), ('alt_text', base.blocks.basics.BaseCharBlock(help_text='Enter an alternative text for the image.', max_length=255, required=False))]), help_text='Add client logos.'))]))]))])), ('company', wagtail.blocks.StructBlock([('content', wagtail.blocks.StreamBlock([('block', wagtail.blocks.StructBlock([('title', base.blocks.basics.BaseCharBlock(help_text='Enter the heading title', required=True)), ('subtitle', base.blocks.basics.BaseCharBlock(help_text='Enter the heading subtitle', required=False)), ('text', base.blocks.basics.BaseTextBlock(help_text='Enter the heading text', required=False))])), ('grid', wagtail.blocks.StreamBlock([('statistics', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('icon', base.blocks.basics.BaseImageBlock()), ('number', base.blocks.basics.BaseCharBlock(help_text='Statistic number')), ('description', base.blocks.basics.BaseCharBlock(help_text='Statistic description'))], help_text='Add statistics')))]))]))])), ('support', wagtail.blocks.StructBlock([('content', wagtail.blocks.StreamBlock([('blocks', wagtail.blocks.StreamBlock([('heading', wagtail.blocks.StructBlock([('title', base.blocks.basics.BaseCharBlock(help_text='Enter the heading title', required=True)), ('subtitle', base.blocks.basics.BaseCharBlock(help_text='Enter the heading subtitle', required=False)), ('text', base.blocks.basics.BaseTextBlock(help_text='Enter the heading text', required=False))])), ('lottie', wagtail.blocks.StructBlock([('methods', base.blocks.basics.BaseListBlock(wagtail.blocks.StructBlock([('icon', base.blocks.basics.BaseImageBlock(required=True)), ('method', base.blocks.basics.BaseCharBlock(required=True)), ('description', base.blocks.basics.BaseCharBlock(required=True)), ('url', base.blocks.basics.BaseURLBlock(required=False))], help_text='Add contact methods.')))]))], required=False))]))]))], default=[]),
        ),
    ]
